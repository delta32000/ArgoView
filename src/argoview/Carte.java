/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package argoview;

import java.io.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import javax.swing.*;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author membre
 */
public class Carte extends javax.swing.JFrame {

    /**
     * Creates new form Carte
     * @param url URL de la carte à télécharger
     * @param i du nombre d'images
     */
    public Carte( String url, int i) {
        this.url = url;
        ijk = i;
        telecharger();
        initComponents();
        label1.setIcon(new ImageIcon(nomImage));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label1 = new javax.swing.JLabel();

        setTitle("Carte");
        setMaximumSize(new java.awt.Dimension(512, 512));
        setMinimumSize(new java.awt.Dimension(512, 512));
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Carte de l'animal géolocalisé", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jPanel1.setMaximumSize(new java.awt.Dimension(512, 550));
        jPanel1.setMinimumSize(new java.awt.Dimension(512, 550));
        jPanel1.setPreferredSize(new java.awt.Dimension(512, 550));

        label1.setText("jLabel1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(label1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    String url;//url de l'image à télécharger
    int ijk = 0;//compteur de nombre d'images à enregister
    String nomImage;//variable contenant le nom de l'image à enregister
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label1;
    // End of variables declaration//GEN-END:variables

    private void telecharger() {
        try {
            //on compte le nombre d'image à enregister
            nomImage = "img\\img"+ijk+".png";
            System.out.println(nomImage);
            // On crée les variables pour télécharger le fichier
            URL adresse = new URL(url);
            URLConnection connexion = adresse.openConnection();
            int taille = connexion.getContentLength();

            // On crée un flux d’entrée pour lire le fichier
            InputStream brut = connexion.getInputStream();
            InputStream entree = new BufferedInputStream(brut);

            // On crée un tableau pour enregistrer les octets bruts
            byte[] donnees = new byte[taille];
            
            // Pour l’instant aucun octet n’a encore été lu
            int octetsLus = 0;

            // Octets de déplacement, et octets déjà lus.
            int deplacement = 0;
            float dejaLu = 0;

            // On boucle pour lire tous les octets 1 à 1
            while(deplacement < taille)
            {
                octetsLus = entree.read(donnees, deplacement, donnees.length - deplacement);

                // Petit calcul: mise à jour du nombre total d’octets lus par ajout au nombre d’octets lus au cours des précédents passages au nombre d’octets lus pendant ce passage
                dejaLu = dejaLu + octetsLus;

                // Si on est à la fin du fichier, on sort de la boucle
                if  (octetsLus == -1)
                    break;

                // se cadrer à un endroit précis du fichier pour lire les octets suivants, c’est le déplacement
                deplacement += octetsLus;
            }
            // On ferme le fichier ouvert en ligne
            entree.close();

            // Enregistrement
            FileOutputStream fichierSortie = new FileOutputStream(nomImage);
            fichierSortie.write(donnees);

            // On ferme les flux de sortie
            fichierSortie.flush();
            fichierSortie.close();
        } catch (MalformedURLException ex) {
            JOptionPane.showMessageDialog(this,
                    "URL de téléchargement mal formée !",
                    "Erreur", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Animal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,
                    "Impossible de télécharger le fichier :\n\tErreur d'entée-sortie :\n" + ex.toString(),
                    "Erreur", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Animal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
